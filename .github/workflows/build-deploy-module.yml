name: Build & Deploy Go Module
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v*.*.*-dev.*'
      - 'v*.*.*-rc.*'
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }} 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.19.4'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=TAG::${TAG}

          semver=( ${TAG//./ } )
          major="${semver[0]#v}"
          minor="${semver[1]}"
          patch="0"
          branch=""
          build="${semver[3]}"

          if [[ "${semver[2]}" =~ "-" ]]; then
          branch=${semver[2]/*\-}
          patch=${semver[2]/\-*}
          else
          patch="${semver[2]}"
          fi

          echo ::set-output name=BRANCH::"${branch}"
          echo ::set-output name=BUILD::"${build}"
          echo ::set-output name=VERSION::"${major}.${minor}.${patch}"

      - name: Build
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          mkdir build
          pushd build
          cmake -G"Visual Studio 16" -A x64 -DGO_MODULE_VERSION=%VERSION% ..
          cmake --build . --config Release
          popd
          mkdir dist\go-module
          copy bin\Release\go-module.dll dist\go-module
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        working-directory: ./runtime

      - name: Build
        if: matrix.os == 'ubuntu-18.04'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install gcc-8 g++-8
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++-8 -DGO_MODULE_VERSION=%VERSION% ..
          cmake --build . --config Release
          cd ..
          mkdir -p dist/go-module
          cp ./bin/libgo-module.so dist/go-module
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        working-directory: ./runtime

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: go-module-${{ matrix.os }}
          path: ./runtime/dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: go-module-windows-2019
          path: dist-windows

      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: go-module-ubuntu-18.04
          path: dist-linux

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${GITHUB_REF/refs\/tags\//}

      - name: Upload windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-windows/go-module/go-module.dll
          asset_name: go-module.dll
          asset_content_type: application/x-msdownload

      - name: Upload linux artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-linux/go-module/libgo-module.so
          asset_name: libgo-module.so
          asset_content_type: application/octet-stream

  delete-artifacts:
    name: Delete artifacts
    runs-on: ubuntu-18.04
    needs: [ create-release ]
    if: ${{ always() }}
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            go-module-ubuntu-18.04
            go-module-windows-2019