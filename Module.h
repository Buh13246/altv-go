// copy this into Module.h
typedef void (*capi_core_log_info)(const char *message);
typedef void (*capi_core_log_debug)(const char *message);
typedef void (*capi_core_log_warning)(const char *message);
typedef void (*capi_core_log_error)(const char *message);
typedef void (*capi_core_log_colored)(const char *message);
typedef void * (*capi_core_create_m_value_bool)(int value);
typedef void * (*capi_core_create_m_value_int)(long long val);
typedef void * (*capi_core_create_m_value_u_int)(unsigned long long val);
typedef void * (*capi_core_create_m_value_double)(double val);
typedef void * (*capi_core_create_m_value_string)(const char *val);
typedef bool (*capi_core_get_m_value_bool)(void *val);
typedef long long (*capi_core_get_m_value_int)(void *val);
typedef unsigned long long (*capi_core_get_m_value_u_int)(void *val);
typedef double (*capi_core_get_m_value_double)(void *val);
typedef const char * (*capi_core_get_m_value_string)(void *val);
typedef void * (*capi_core_create_vehicle)(unsigned long model, float posX, float posY, float posZ,
                               float rotX, float rotY, float rotZ);
typedef unsigned long (*capi_core_hash)(const char *str);
typedef int (*capi_core_file_exists)(const char *path);
typedef const char * (*capi_core_read_file)(const char *path);
typedef void * (*capi_core_get_entity_by_i_d)(unsigned short id);
typedef int (*capi_core_has_meta_data)(const char *key);
typedef MetaData (*capi_core_get_meta_data)(const char *key);
typedef void (*capi_core_set_meta_data)(const char *key, void *val);
typedef void (*capi_core_delete_meta_data)(const char *key);
typedef int (*capi_core_has_synced_meta)(const char *key);
typedef MetaData (*capi_core_get_synced_meta)(const char *key);
typedef void (*capi_core_destroy_base_object)(void *h);
typedef void * (*capi_core_start_resource)(const char *name);
typedef void (*capi_core_stop_resource)(const char *name);
typedef void * (*capi_core_restart_resource)(const char *name);
typedef void (*capi_core_set_synced_meta_data)(const char *key, void *val);
typedef void (*capi_core_delete_synced_meta_data)(const char *key);
typedef Array (*capi_core_get_players_by_name)(const char *name);
typedef void (*capi_core_set_password)(const char *password);


// copy this into Module.h
void core_log_info(const char *message);
void core_log_debug(const char *message);
void core_log_warning(const char *message);
void core_log_error(const char *message);
void core_log_colored(const char *message);
void * core_create_m_value_bool(int value);
void * core_create_m_value_int(long long val);
void * core_create_m_value_u_int(unsigned long long val);
void * core_create_m_value_double(double val);
void * core_create_m_value_string(const char *val);
bool core_get_m_value_bool(void *val);
long long core_get_m_value_int(void *val);
unsigned long long core_get_m_value_u_int(void *val);
double core_get_m_value_double(void *val);
const char * core_get_m_value_string(void *val);
void * core_create_vehicle(unsigned long model, float posX, float posY, float posZ,
                               float rotX, float rotY, float rotZ);
unsigned long core_hash(const char *str);
int core_file_exists(const char *path);
const char * core_read_file(const char *path);
void * core_get_entity_by_i_d(unsigned short id);
int core_has_meta_data(const char *key);
MetaData core_get_meta_data(const char *key);
void core_set_meta_data(const char *key, void *val);
void core_delete_meta_data(const char *key);
int core_has_synced_meta(const char *key);
MetaData core_get_synced_meta(const char *key);
void core_destroy_base_object(void *h);
void * core_start_resource(const char *name);
void core_stop_resource(const char *name);
void * core_restart_resource(const char *name);
void core_set_synced_meta_data(const char *key, void *val);
void core_delete_synced_meta_data(const char *key);
Array core_get_players_by_name(const char *name);
void core_set_password(const char *password);
